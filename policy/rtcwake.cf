bundle common rtcwake_g
{
  meta:
      "purpose" string => "Define variables common to rtcwake bundles";

  vars:
      # Todo: set this conditionally and allow overriede from def
      "state_dir" string => "$(sys.workdir)/state/rtcwake";
}

bundle agent rtcwake_subscribe
# @brief This is a subscription interface to rtcwake
#
# Simply define string variable with a valid date string value and tag
# it with `rtcwake`. This bundle should be actuated after the rest of
# your policy, near the end of the bundlesequence so that there is
# plenty of opportunity for other bundles to define variables.
#
# **Example:**
#
# ```cf3
# bundle agent bundle1
# {
#   vars:
#       "wake" string => "saturday 2:00pm", meta => { "rtcwake" };
#
# }
#
# bundle agent bundle2
# {
#   vars:
#       "wake" string => "saturday 2:00pm", meta => { "rtcwake" };
#
# }
#
# bundle agent actuate_rtcwake
# {
#   methods:
#
#       "Wake up for updates"
#         usebundle => rtcwake_subscribe;
# }
# ```
{
  meta:
      "purpose" string => "Collect date strings tagged with rtcwake and schedule them.";

  vars:
      "wake_vars" slist => variablesmatching(".*", "rtcwake");
      "wake[$(wake_vars)]" string => "$($(wake_vars))";
      "wakes" slist => getvalues( wake );

  methods:
     "Schedule Wake" usebundle => rtcwake( $(wakes) );
}

bundle agent rtcwake(when)
# @brief Schedule a time for a machine to wake up from sleep
# @param when a `date` compliant string
#
# **Example:**
#
# ``cf3
# bundle agent example
# {
#   methods:
#
#       "Wake up for updates"
#         usebundle => rtcwake("saturday 1:00am");
# }
# ```
{
  meta:
      "Purpose" string => "Ensure the host is schedule to wake up at a specific date time.";

  vars:
      # We find the scheduled wakes so that we can purge wakes that
      # have already past.
      "scheduled_wakes"
        slist => lsdir( $(rtcwake_g.state_dir), "\d+", false );


      "epoc_next_wake"
        string => execresult("/bin/date +%s -d '$(when)'", noshell),
        comment => "We need to know the epoch of the next wake time
                    for proper scheduling";

      "state_file"
        string => "$(rtcwake_g.state_dir)/$(epoc_next_wake)";

  classes:
      # We look for a simple statefile to see if we have already
      # successfully scheduled the wakeup.
      "next_rtcwake_scheduled"
        expression => fileexists("$(state_file)"),
        comment => "We need to know if we have already scheduled the
                    next wakeup so that we don't continue to schedule
                    additional wakeups for the same time.";

  commands:

      # You might need to account for hardware clock being UTC or
      # local time

      "/usr/sbin/rtcwake"
        args => "-m no -t $(epoc_next_wake)",
        classes => scoped_classes_generic("bundle", "rtcwake"),
        unless => "next_rtcwake_scheduled",
        comment => "We try to wake the computer up so that it can be
                    available for scheduled promises.";

  files:
      any::
        "$(rtcwake_g.state_dir)/$(scheduled_wakes)"
          delete => tidy,
          if => islessthan( $(scheduled_wakes), now() ),
          comment => "We purge rtcwakes that have past to keep things tidy";

      rtcwake_repaired::
        "$(state_file)"
          create => "true",
          comment => "We create this statefile upon the successful
                      issuance of the rtcwake command so that we can
                      tell if we have already scheduled the computer
                      to wake up or not";
}

bundle agent rtcwake_inventory
# @brief Inventory rtcwakes that are scheduled
{
  vars:
      "scheduled_wakes"
        slist => lsdir( $(rtcwake_g.state_dir), "\d+", false );

      # We only inventory the wakes that are scheduled in the future
      "rtcwake[$(scheduled_wakes)]"
        string => strftime( "localtime", "%Y-%m-%d %l:%M%p %Z", $(scheduled_wakes) ),
        meta => { "inventory", "attribute_name=Scheduled rtcwake" },
        if => isgreaterthan( $(scheduled_wakes), now() );

      "dates" slist => getvalues(rtcwake);

  reports:
      DEBUG|DEBUG_rtcwake_inventory::
      "DEBUG $(this.bundle): $(scheduled_wakes)";
      "DEBUG $(this.bundle): $(dates)";
}
